datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_burgershop {
  stock String? @db.LongText

  @@ignore
}

model ak47_qb_cardealer {
  id             Int     @id @default(autoincrement())
  name           String? @db.VarChar(50)
  job            String? @db.VarChar(50)
  polyzone       String? @db.LongText
  boss           String? @db.LongText
  catalogue      String? @db.LongText
  setting        String? @db.LongText
  cataloguespawn String? @db.LongText
  purchasespawn  String? @db.LongText
  testspawn      String? @db.LongText
  vehicles       String? @db.LongText
  vips           String? @db.LongText
  display        String? @db.LongText
  blip           String? @db.LongText
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_cardealer_finance {
  identifier    String? @db.VarChar(100)
  plate         String? @db.VarChar(50)
  lastpayment   Int?
  missedpayment Int?
  price         Int?
  installments  Int?
  dealerjob     String? @db.VarChar(100)
  dealerid      Int?

  @@ignore
}

model ak47_qb_cardealer_jobs {
  job    String  @id @db.VarChar(100)
  label  String? @db.VarChar(100)
  grades String? @db.LongText
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_chickenwings {
  stock String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_chicknfries {
  stock String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_donutshop {
  stock String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_pizzashop {
  stock String? @db.LongText

  @@ignore
}

model ak47_qb_playershop {
  id            Int      @id @default(autoincrement())
  owner         String?  @db.VarChar(100)
  name          String   @db.VarChar(100)
  buysell       String   @db.LongText
  polyzone      String   @db.LongText
  garage        String   @db.LongText
  price         Int      @default(0)
  doors         String   @db.LongText
  shoplevel     Int      @default(1) @db.TinyInt
  blip          Int      @default(52)
  shopaccount   Int      @default(0)
  employees     String?  @db.LongText
  shopactions   String?  @db.LongText
  billaction    String?  @db.LongText
  bossaction    String?  @db.LongText
  shopkeeper    String?  @db.LongText
  items         String?  @db.LongText
  shipment      String?  @db.VarChar(50)
  autoshop      Boolean? @default(true)
  doorautolock  Boolean? @default(false)
  infinitestock Boolean? @default(false)
  priceaccess   Boolean? @default(false)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_popchicken {
  stock String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_seafood {
  stock String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ak47_qb_taco {
  stock String? @db.LongText

  @@ignore
}

model apartments {
  id        Int     @id @default(autoincrement())
  name      String? @db.VarChar(255)
  type      String? @db.VarChar(255)
  label     String? @db.VarChar(255)
  citizenid String? @db.VarChar(255)

  @@index([citizenid], map: "citizenid")
  @@index([name], map: "name")
}

model bank_accounts {
  record_id    BigInt                     @id @default(autoincrement())
  citizenid    String?                    @unique(map: "citizenid") @db.VarChar(250)
  business     String?                    @db.VarChar(50)
  businessid   Int?
  gangid       String?                    @db.VarChar(50)
  amount       BigInt                     @default(0)
  account_type bank_accounts_account_type @default(Current)

  @@index([business], map: "business")
  @@index([businessid], map: "businessid")
  @@index([gangid], map: "gangid")
}

model bank_cards {
  record_id  BigInt  @default(autoincrement())
  citizenid  String  @id @db.VarChar(50)
  cardNumber String? @db.VarChar(50)
  cardPin    String? @db.VarChar(50)
  cardActive Int?    @default(1) @db.TinyInt
  cardLocked Int?    @default(0) @db.TinyInt
  cardType   String? @db.VarChar(50)

  @@index([record_id], map: "record_id")
}

model bank_statements {
  record_id  BigInt  @id @default(autoincrement())
  citizenid  String? @db.VarChar(50)
  account    String? @db.VarChar(50)
  business   String? @db.VarChar(50)
  businessid Int?
  gangid     String? @db.VarChar(50)
  deposited  Int?
  withdraw   Int?
  balance    Int?
  date       String? @db.VarChar(50)
  type       String? @db.VarChar(255)

  @@index([business], map: "business")
  @@index([businessid], map: "businessid")
  @@index([gangid], map: "gangid")
}

model bans {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(50)
  license  String? @db.VarChar(50)
  discord  String? @db.VarChar(50)
  ip       String? @db.VarChar(50)
  reason   String? @db.Text
  expire   Int?
  bannedby String  @default("LeBanhammer") @db.VarChar(255)

  @@index([discord], map: "discord")
  @@index([ip], map: "ip")
  @@index([license], map: "license")
}

model casino_players {
  ID         Int    @id @default(autoincrement())
  identifier String @db.VarChar(128)
  properties String @db.LongText
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model cd_garage_keys {
  plate               String @db.VarChar(8)
  owner_identifier    String @db.VarChar(50)
  reciever_identifier String @db.VarChar(50)
  char_name           String @db.VarChar(50)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model cd_garage_privategarage {
  identifier String @db.VarChar(50)
  data       String @db.LongText

  @@ignore
}

model codem_billing {
  id               Int     @id @default(autoincrement())
  identifier       String? @db.Char(50)
  name             String? @db.Char(50)
  targetidentifier String? @db.Char(50)
  targetname       String? @db.Char(50)
  amount           String? @db.Char(50)
  invoicelabel     String? @db.Char(50)
  status           String? @db.Char(50)
  societyname      String? @db.Char(50)
  uniqueid         String? @unique(map: "uniqueid") @db.Char(50)
  date             String? @db.Char(50)
  dateupdate       String? @db.Char(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model codem_hud_data {
  identifier String? @unique(map: "identifier") @db.VarChar(65)
  data       String? @db.LongText
  stress     Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model codem_newbank {
  identifier       String? @db.Char(50)
  profiledata      String? @db.LongText
  spenddata        String? @db.LongText
  cryptodata       String? @db.LongText
  loandata         String? @db.LongText
  savingdata       String? @db.LongText
  notificationdata String? @db.LongText
  mostsenddata     String? @db.LongText
  spendigsdata     String? @db.LongText

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model codem_newbank_society {
  jobname          String? @db.Char(50)
  playersdata      String? @db.LongText
  spenddata        String? @db.LongText
  notificationdata String? @db.LongText
  contributiondata String? @db.LongText

  @@ignore
}

model crafting_recipes {
  id                    Int    @id @default(autoincrement())
  name                  String @db.VarChar(50)
  result_items          String @db.LongText
  perfect_recipe_reward String @db.LongText
  ingredients           String @db.LongText
  time                  Int

  @@index([id], map: "id")
}

model crypto {
  crypto  String  @id @default("qbit") @db.VarChar(50)
  worth   Int     @default(0)
  history String? @db.Text
}

model crypto_transactions {
  id        Int       @id @default(autoincrement())
  citizenid String?   @db.VarChar(50)
  title     String?   @db.VarChar(50)
  message   String?   @db.VarChar(50)
  date      DateTime? @default(now()) @db.Timestamp(0)

  @@index([citizenid], map: "citizenid")
}

model dealers {
  id        Int     @id @default(autoincrement())
  name      String  @default("0") @db.VarChar(50)
  coords    String? @db.LongText
  time      String? @db.LongText
  createdby String  @default("0") @db.VarChar(50)
}

model doorscreator_buildings {
  id                    Int     @id @default(autoincrement())
  label                 String  @db.VarChar(50)
  default_state         Int     @default(0) @db.TinyInt
  allowed_jobs          String? @db.LongText
  allowed_gangs         String? @db.LongText
  required_item         String? @db.VarChar(50)
  requires_job_and_item Int     @default(0)
  required_code         String? @db.VarChar(50)
  auto_closure_seconds  Int?
  requires_identifier   Int     @default(0)
  allowed_identifiers   String  @db.LongText
}

model doorscreator_doors {
  id                       Int     @id @default(autoincrement())
  label                    String  @db.VarChar(50)
  doors                    String  @db.LongText
  default_state            Int     @default(0) @db.TinyInt
  icon_coords              String  @db.LongText
  max_distance             Int
  allowed_jobs             String? @db.LongText
  allowed_gangs            String? @db.LongText
  required_item            String? @db.VarChar(50)
  requires_job_and_item    Int     @default(0)
  required_code            String? @db.VarChar(50)
  auto_closure_seconds     Int?
  parent_building          Int?
  is_sliding               Int     @default(0)
  requires_identifier      Int     @default(0)
  allowed_identifiers      String  @db.LongText
  vault                    String? @db.LongText
  can_be_lockpicked        Int     @default(1)
  alert_police_on_lockpick Int     @default(0)
  shop_id                  Int?
  display_icon             Int     @default(1) @db.TinyInt
  sounds_data              String? @db.LongText

  @@index([id], map: "id")
}

model drugs_fields {
  id           Int     @id @default(autoincrement())
  label        String  @db.VarChar(50)
  coords       String  @db.LongText
  radius       Int
  object_model String  @db.VarChar(50)
  max_objects  Int
  items        String  @db.LongText
  time         Int
  blip_name    String? @db.VarChar(50)
  blip_sprite  Int?
  blip_color   Int?
  blip_scale   Float?  @db.Float

  @@index([id], map: "id")
}

model drunk_stats {
  identifier     String @id @db.VarChar(128)
  drunk_level    Float  @default(0) @db.Float
  headache_level Float  @default(0) @db.Float
  toughness      Int    @default(0)
}

model electrocuffed_players {
  id         String  @id @db.VarChar(60)
  date       String? @default("0") @db.VarChar(60)
  gps_status String? @db.VarChar(60)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model envi_chopshop {
  shop      String? @db.VarChar(50)
  owner     String? @db.VarChar(50)
  ownerName String? @db.VarChar(50)
  funds     Int     @default(0)

  @@map("envi-chopshop")
  @@ignore
}

model ev_identifiers {
  identifier  String @id @db.VarChar(255)
  citizenid   String @db.VarChar(50)
  bloodtype   String @db.VarChar(50)
  fingerprint String @db.VarChar(50)
}

model flight_atmrobbery {
  id      String  @id @db.VarChar(50)
  x       String? @db.VarChar(50)
  y       String? @db.VarChar(50)
  z       String? @db.VarChar(50)
  heading String  @default("0") @db.VarChar(50)
  type    String? @db.VarChar(50)
  step    String? @db.VarChar(50)
}

model fuel_stations {
  location  Int     @id
  owned     Int?
  owner     String? @db.VarChar(50)
  fuel      Int?
  fuelprice Int?
  balance   Int?
  label     String? @db.VarChar(255)
}

model gang_zones {
  id      Int     @id @default(autoincrement())
  name    String? @db.VarChar(16)
  gang_id Int?
  loyalty Int?    @default(0)
  gangs   gangs?  @relation(fields: [gang_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_gang_zones_gangs")

  @@index([gang_id], map: "FK_gang_zones_gangs")
}

model gangs {
  id          Int          @id @default(autoincrement())
  identifier  String?      @default("") @db.VarChar(255)
  tag         String?      @unique(map: "tag") @default("0") @db.VarChar(10)
  name        String?      @unique(map: "name") @default("0") @db.VarChar(32)
  color       String?      @default("0") @db.VarChar(16)
  group       String?      @db.VarChar(24)
  checkpoints String?      @db.Text
  balance     Int          @default(0)
  vehicules   String?      @db.Text
  created_at  DateTime     @default(now()) @db.Timestamp(0)
  gang_zones  gang_zones[]
}

model gksphone_app_chat {
  id      Int      @id @default(autoincrement())
  sendcid String   @db.LongText
  channel String   @db.VarChar(20)
  message String   @db.VarChar(255)
  time    DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_bank_transfer {
  id         Int      @id @default(autoincrement())
  type       Int
  identifier String?  @db.LongText
  price      String   @db.LongText
  name       String   @db.LongText
  time       DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_blockednumber {
  id         Int    @id @default(autoincrement())
  identifier String @db.LongText
  hex        String @db.LongText
  number     String @db.LongText
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model gksphone_calls {
  id       Int      @id @default(autoincrement())
  owner    String   @db.LongText
  num      String   @db.LongText
  incoming Int
  time     DateTime @default(now()) @db.Timestamp(0)
  accepts  Int
}

model gksphone_ebay {
  id    Int     @id @default(autoincrement())
  label String  @db.LongText
  price Int?    @default(0)
  count Int
  item  String  @db.LongText
  kapat String? @default("false") @db.VarChar(50)
  adet  Int?    @default(0)
  cid   String? @db.VarChar(9999)
  store Int?
}

model gksphone_gallery {
  id    Int      @id @default(autoincrement())
  hex   String   @db.LongText
  image String   @db.LongText
  time  DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_gameleaderboard {
  id     Int     @id @default(autoincrement())
  tetris Int     @default(0)
  snake  Int     @default(0)
  twenty Int     @default(0)
  owner  String? @unique(map: "owner") @db.VarChar(500)
  name   String? @db.VarChar(500)
}

model gksphone_gotur {
  id    Int     @id @default(autoincrement())
  label String  @db.LongText
  price Int?    @default(0)
  count Int
  item  String  @db.LongText
  kapat String? @default("false") @db.VarChar(50)
  adet  Int?    @default(0)
}

model gksphone_gps {
  id   Int     @id @default(autoincrement())
  hex  String  @db.LongText
  nott String? @db.LongText
  gps  String? @db.LongText
}

model gksphone_group_message {
  id                      Int                     @id @default(autoincrement())
  groupid                 Int
  owner                   String                  @db.LongText
  ownerphone              String                  @db.VarChar(50)
  groupname               String                  @db.VarChar(255)
  messages                String                  @db.LongText
  contacts                String                  @db.LongText
  time                    DateTime                @default(now()) @db.Timestamp(0)
  gksphone_messages_group gksphone_messages_group @relation(fields: [groupid], references: [id], onUpdate: Restrict, map: "FK_phonegroupmessage")

  @@index([groupid], map: "groupid")
}

model gksphone_insto_accounts {
  id                    Int                     @id @default(autoincrement())
  forename              String                  @db.LongText
  surname               String                  @db.LongText
  username              String                  @unique(map: "username") @db.VarChar(250)
  password              String                  @db.LongText
  avatar_url            String?                 @db.LongText
  takip                 String?                 @db.LongText
  averify               Int                     @default(0) @db.TinyInt
  gksphone_insto_instas gksphone_insto_instas[]
  gksphone_insto_likes  gksphone_insto_likes[]
  gksphone_insto_story  gksphone_insto_story[]
}

model gksphone_insto_instas {
  id                      Int                     @id @default(autoincrement())
  authorId                Int
  realUser                String?                 @db.LongText
  message                 String                  @db.LongText
  image                   String                  @db.LongText
  filters                 String                  @db.LongText
  time                    DateTime                @default(now()) @db.Timestamp(0)
  likes                   Int                     @default(0)
  gksphone_insto_accounts gksphone_insto_accounts @relation(fields: [authorId], references: [id], onUpdate: Restrict, map: "FK_gksphone_insto_instas_gksphone_insto_accounts")
  gksphone_insto_likes    gksphone_insto_likes[]

  @@index([authorId], map: "FK_gksphone_insto_instas_gksphone_insto_accounts")
}

model gksphone_insto_likes {
  id                      Int                      @id @default(autoincrement())
  authorId                Int?
  inapId                  Int?
  gksphone_insto_accounts gksphone_insto_accounts? @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_gksphone_insto_likes_gksphone_insto_accounts")
  gksphone_insto_instas   gksphone_insto_instas?   @relation(fields: [inapId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FK_gksphone_insto_likes_gksphone_insto_instas")

  @@index([authorId], map: "FK_gksphone_insto_likes_gksphone_insto_accounts")
  @@index([inapId], map: "FK_gksphone_insto_likes_gksphone_insto_instas")
}

model gksphone_insto_story {
  id                      Int                     @id @default(autoincrement())
  authorId                Int
  realUser                String?                 @db.LongText
  stories                 String                  @db.LongText
  isRead                  String                  @db.VarChar(256)
  time                    DateTime                @default(now()) @db.Timestamp(0)
  likes                   Int                     @default(0)
  gksphone_insto_accounts gksphone_insto_accounts @relation(fields: [authorId], references: [id], onUpdate: Restrict, map: "FK_gksphone_insto_story_gksphone_insto_accounts")

  @@index([authorId], map: "FK_gksphone_insto_story_gksphone_insto_accounts")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model gksphone_instocomment {
  id        Int      @default(autoincrement())
  messageid Int      @default(0)
  userid    Int      @default(0)
  message   String   @db.LongText
  time      DateTime @default(now()) @db.Timestamp(0)

  @@index([id], map: "id")
  @@ignore
}

model gksphone_invoices {
  id              Int     @id @default(autoincrement())
  citizenid       String? @db.VarChar(50)
  amount          Int     @default(0)
  society         String? @db.TinyText
  sender          String? @db.VarChar(50)
  sendercitizenid String? @db.VarChar(50)
  label           String? @db.VarChar(250)

  @@index([citizenid], map: "citizenid")
}

model gksphone_job_message {
  id      Int      @id @default(autoincrement())
  name    String   @db.LongText
  number  String   @db.VarChar(50)
  message String   @db.LongText
  photo   String?  @db.LongText
  gps     String   @db.VarChar(255)
  owner   Int      @default(0)
  jobm    String   @db.VarChar(255)
  anon    String   @db.VarChar(50)
  time    DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_mails {
  id        Int      @id @default(autoincrement())
  citizenid String   @default("0") @db.VarChar(255)
  sender    String   @default("0") @db.VarChar(255)
  subject   String   @default("0") @db.VarChar(255)
  image     String?  @db.Text
  message   String   @db.Text
  button    String?  @db.Text
  time      DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_messages {
  id          Int      @id @default(autoincrement())
  transmitter String   @db.VarChar(50)
  receiver    String   @db.VarChar(50)
  message     String   @db.LongText
  time        DateTime @default(now()) @db.Timestamp(0)
  isRead      Int      @default(0)
  owner       Int      @default(0)
}

model gksphone_messages_group {
  id                     Int                      @id @default(autoincrement())
  owner                  String                   @db.LongText
  ownerphone             String                   @db.VarChar(50)
  groupname              String                   @db.VarChar(255)
  gimage                 String                   @db.LongText
  contacts               String                   @db.LongText
  gksphone_group_message gksphone_group_message[]
}

model gksphone_news {
  id     Int       @id @default(autoincrement())
  hex    String?   @db.LongText
  haber  String?   @db.LongText
  baslik String?   @db.LongText
  resim  String?   @db.LongText
  video  String?   @db.LongText
  zaman  DateTime? @default(now()) @db.Timestamp(0)
}

model gksphone_racing {
  identifier  String  @db.VarChar(60)
  track_id    Int
  player_name String  @db.VarChar(255)
  best_lap    String? @db.VarChar(45)

  @@id([identifier, track_id])
}

model gksphone_settings {
  id           Int     @id @default(autoincrement())
  identifier   String  @db.LongText
  crypto       String? @default("{}") @db.VarChar(535)
  phone_number String? @db.VarChar(50)
  avatar_url   String? @db.LongText
}

model gksphone_tinderacc {
  id         Int     @id @default(autoincrement())
  name       String? @db.VarChar(255)
  username   String? @db.VarChar(255)
  passaword  String? @db.VarChar(255)
  date       String? @db.VarChar(255)
  image      String? @db.VarChar(255)
  gender     Int?
  identifier String? @db.VarChar(255)
}

model gksphone_tindermatch {
  id        Int @id @default(autoincrement())
  user_id   Int @default(0)
  friend_id Int @default(0)
  is_match  Int @default(0)
}

model gksphone_tindermessage {
  id       Int      @id @default(autoincrement())
  message  String   @db.Text
  tinderes String   @db.Text
  owner    Int      @default(0)
  time     DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_twt_followers {
  follow_id                                                              Int                @id @default(autoincrement())
  userid                                                                 Int
  followid                                                               Int
  created_at                                                             DateTime           @default(now()) @db.Timestamp(0)
  gksphone_twt_users_gksphone_twt_followers_followidTogksphone_twt_users gksphone_twt_users @relation("gksphone_twt_followers_followidTogksphone_twt_users", fields: [followid], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_follower_gksphone_twt_users")
  gksphone_twt_users_gksphone_twt_followers_useridTogksphone_twt_users   gksphone_twt_users @relation("gksphone_twt_followers_useridTogksphone_twt_users", fields: [userid], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_followers_gksphone_twt_users")

  @@index([followid], map: "FK_gksphone_twt_follower_gksphone_twt_users")
  @@index([userid], map: "userid")
}

model gksphone_twt_hastags {
  hastag_id          Int                @id @default(autoincrement())
  hastag             String             @default("") @db.VarChar(250)
  postid             Int
  created_at         DateTime           @default(now()) @db.Timestamp(0)
  gksphone_twt_posts gksphone_twt_posts @relation(fields: [postid], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_hastags_gksphone_twt_posts")

  @@index([postid], map: "postid")
}

model gksphone_twt_likepost {
  like_id            Int                @id @default(autoincrement())
  postid             Int
  userid             Int
  created_at         DateTime           @default(now()) @db.Timestamp(0)
  gksphone_twt_posts gksphone_twt_posts @relation(fields: [postid], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_likepost_gksphone_twt_posts")
  gksphone_twt_users gksphone_twt_users @relation(fields: [userid], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_likepost_gksphone_twt_users")

  @@index([postid], map: "postid")
  @@index([userid], map: "userid")
}

model gksphone_twt_posts {
  post_id               Int                     @id @default(autoincrement())
  identifier            String                  @db.LongText
  user_id               Int?
  content               String                  @db.LongText
  media                 String?                 @db.LongText
  poll_options          String?                 @db.LongText
  end_date              DateTime?               @db.Timestamp(0)
  comment               Int                     @default(0)
  commentid             Int                     @default(0)
  pinned                Int                     @default(0)
  created_at            DateTime                @default(now()) @db.Timestamp(0)
  gksphone_twt_hastags  gksphone_twt_hastags[]
  gksphone_twt_likepost gksphone_twt_likepost[]
  gksphone_twt_users    gksphone_twt_users?     @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "gksphone_twt_posts_ibfk_1")
  gksphone_twt_retweet  gksphone_twt_retweet[]

  @@index([user_id], map: "user_id")
}

model gksphone_twt_retweet {
  retwettsid         Int                @id @default(autoincrement())
  postid             Int
  userid             Int
  created_at         DateTime           @default(now()) @db.Timestamp(0)
  gksphone_twt_posts gksphone_twt_posts @relation(fields: [postid], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_retweet_gksphone_twt_posts")
  gksphone_twt_users gksphone_twt_users @relation(fields: [userid], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_gksphone_twt_retweet_gksphone_twt_users")

  @@index([postid], map: "postid")
  @@index([userid], map: "userid")
}

model gksphone_twt_users {
  user_id                                                                    Int                      @id @default(autoincrement())
  identifier                                                                 String                   @db.LongText
  username                                                                   String                   @unique(map: "unique_username") @db.VarChar(255)
  password                                                                   String                   @db.VarChar(255)
  displayname                                                                String                   @db.VarChar(255)
  avatar                                                                     String?                  @db.VarChar(255)
  banner                                                                     String?                  @db.VarChar(255)
  is_verified                                                                Int                      @default(0)
  verifedbuytime                                                             DateTime?                @default(now()) @db.Timestamp(0)
  banned                                                                     Int                      @default(0)
  created_at                                                                 DateTime                 @default(now()) @db.Timestamp(0)
  gksphone_twt_followers_gksphone_twt_followers_followidTogksphone_twt_users gksphone_twt_followers[] @relation("gksphone_twt_followers_followidTogksphone_twt_users")
  gksphone_twt_followers_gksphone_twt_followers_useridTogksphone_twt_users   gksphone_twt_followers[] @relation("gksphone_twt_followers_useridTogksphone_twt_users")
  gksphone_twt_likepost                                                      gksphone_twt_likepost[]
  gksphone_twt_posts                                                         gksphone_twt_posts[]
  gksphone_twt_retweet                                                       gksphone_twt_retweet[]
}

model gksphone_users_contacts {
  id         Int     @id @default(autoincrement())
  identifier String? @db.LongText
  number     String? @db.VarChar(30)
  display    String? @db.LongText
}

model gksphone_vehicle_sales {
  id         Int      @id @default(autoincrement())
  owner      String   @db.LongText
  ownerphone String   @db.VarChar(255)
  plate      String   @db.VarChar(255)
  model      String   @db.VarChar(255)
  price      Int
  image      String   @db.LongText
  time       DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_wanted {
  id         Int      @id @default(autoincrement())
  citizenid  String   @db.VarChar(50)
  fullname   String   @db.VarChar(50)
  reason     String?  @db.VarChar(250)
  appearance String?  @db.VarChar(250)
  lastseen   String?  @db.VarChar(250)
  time       DateTime @default(now()) @db.Timestamp(0)
}

model gksphone_yellow {
  id           Int      @id @default(autoincrement())
  phone_number String?  @db.VarChar(50)
  firstname    String?  @db.VarChar(256)
  message      String   @db.LongText
  image        String?  @db.LongText
  time         DateTime @default(now()) @db.Timestamp(0)
  filter       String?  @db.VarChar(255)
}

model gloveboxitems {
  id    Int     @default(autoincrement())
  plate String  @id @default("[]") @db.VarChar(255)
  items String? @db.LongText

  @@index([id], map: "id")
}

model gympass {
  id         Int    @id @default(autoincrement())
  identifier String @db.VarChar(500)
  gymid      Int
  gymtime    Int

  @@index([identifier], map: "identifier")
}

model gymstats {
  id         Int    @id @default(autoincrement())
  identifier String @db.VarChar(500)
  stats      String @db.LongText

  @@index([identifier], map: "identifier")
}

model harvestable_items {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(50)
  time_to_harvest Int
  min_quantity    Int
  max_quantity    Int
  icon_type       Int
  coords          String  @db.LongText
  scale           String  @db.LongText
  bounce          Int     @default(0)
  follow_camera   Int     @default(0)
  rotate          Int     @default(0)
  color           String  @db.VarChar(100)
  opacity         Int     @default(0)
  blip_name       String? @db.VarChar(50)
  blip_sprite     Int?
  blip_color      Int?
  blip_scale      Float?  @db.Float

  @@index([id], map: "id")
}

model hotel_rooms {
  id         Int       @id
  citizenid  String?   @db.VarChar(45)
  name       String?   @db.VarChar(45)
  password   String?   @db.VarChar(45)
  expire     DateTime? @default(dbgenerated("(current_timestamp() + interval 1 day)")) @db.DateTime(0)
  roomlabel  String?   @db.VarChar(45)
  cardnumber String?   @db.VarChar(50)
}

model house_plants {
  id       Int     @id @default(autoincrement())
  building String? @db.VarChar(50)
  stage    String? @default("stage-a") @db.VarChar(50)
  sort     String? @db.VarChar(50)
  gender   String? @db.VarChar(50)
  food     Int?    @default(100)
  health   Int?    @default(100)
  progress Int?    @default(0)
  coords   String? @db.Text
  plantid  String? @db.VarChar(50)

  @@index([building], map: "building")
  @@index([plantid], map: "plantid")
}

model houselocations {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar(255)
  label       String?  @db.VarChar(255)
  coords      String?  @db.Text
  owned       Boolean?
  price       Int?
  tier        Int?     @db.TinyInt
  garage      String?  @db.Text
  houseID     String?  @db.VarChar(50)
  creator     String?  @db.VarChar(50)
  mlo         String?  @db.VarChar(50)
  ipl         String?  @db.VarChar(50)
  garageShell String?  @db.VarChar(50)

  @@index([name], map: "name")
}

model inventory_clothes {
  id         Int     @default(autoincrement())
  identifier String  @id @default("") @db.VarChar(50)
  items      String? @db.Text

  @@index([id], map: "id")
}

model inventory_glovebox {
  id    Int     @default(autoincrement())
  plate String  @id @db.VarChar(255)
  items String? @db.LongText

  @@index([id], map: "id")
}

model inventory_metadata {
  id         Int     @id @default(autoincrement())
  identifier String? @db.VarChar(50)
  data       String? @db.Text
}

model inventory_stash {
  id    Int     @default(autoincrement())
  stash String  @id @db.VarChar(255)
  items String? @db.LongText

  @@index([id], map: "id")
}

model inventory_trunk {
  id    Int     @default(autoincrement())
  plate String  @id @db.VarChar(255)
  items String? @db.LongText

  @@index([id], map: "id")
}

model job_grades {
  id       Int     @id @default(autoincrement())
  job_name String? @db.VarChar(50)
  grade    Int
  name     String  @db.VarChar(50)
  label    String  @db.VarChar(50)
  salary   Int

  @@index([id], map: "id")
}

model jobs {
  name                      String  @id @db.VarChar(50)
  label                     String? @db.VarChar(50)
  whitelisted               Int     @default(0)
  enable_billing            Int?    @default(0)
  can_rob                   Int?    @default(0)
  can_handcuff              Int?    @default(0)
  can_lockpick_cars         Int?    @default(0)
  can_wash_vehicles         Int?    @default(0)
  can_repair_vehicles       Int?    @default(0)
  can_impound_vehicles      Int?    @default(0)
  can_check_identity        Int?    @default(0)
  can_check_vehicle_owner   Int?    @default(0)
  can_check_driving_license Int?    @default(0)
  can_check_weapon_license  Int?    @default(0)
  can_heal                  Int?    @default(0)
  can_revive                Int?    @default(0)
  actions_menu_enabled      Int?    @default(1)
  placeable_objects         String? @db.LongText
}

model jobs_armories {
  id         Int     @id @default(autoincrement())
  weapon     String  @db.VarChar(50)
  components String? @db.LongText
  ammo       Int     @db.UnsignedInt
  tint       Int
  marker_id  Int
  identifier String  @db.VarChar(80)

  @@index([id, marker_id, identifier], map: "id")
}

model jobs_data {
  id                 Int     @id @default(autoincrement())
  job_name           String  @db.VarChar(50)
  type               String  @db.VarChar(50)
  coords             String  @default("") @db.VarChar(300)
  grades_type        String? @db.VarChar(20)
  specific_grades    String? @db.VarChar(255)
  min_grade          Int?    @db.SmallInt
  data               String? @db.LongText
  blip_id            Int?
  blip_color         Int?    @default(0)
  blip_scale         Float?  @default(1) @db.Float
  label              String? @db.VarChar(50)
  marker_type        Int?    @default(1)
  marker_scale_x     Float?  @default(1.5) @db.Float
  marker_scale_y     Float?  @default(1.5) @db.Float
  marker_scale_z     Float?  @default(0.5) @db.Float
  marker_color_red   Int?    @default(150)
  marker_color_green Int?    @default(150)
  marker_color_blue  Int?    @default(0)
  marker_color_alpha Int?    @default(50)
  ped                String? @db.VarChar(50)
  ped_heading        Float?  @db.Float
  object             String? @db.VarChar(50)
  object_pitch       Float?  @db.Float
  object_roll        Float?  @db.Float
  object_yaw         Float?  @db.Float

  @@index([id], map: "id")
}

model jobs_garages {
  vehicle_id    Int     @id @default(autoincrement())
  identifier    String  @db.VarChar(100)
  marker_id     Int
  vehicle       String  @default("") @db.VarChar(50)
  vehicle_props String  @db.LongText
  plate         String? @db.VarChar(10)

  @@index([identifier, marker_id], map: "identifier")
}

model jobs_shops {
  id            Int    @id @default(autoincrement())
  marker_id     Int
  item_name     String @db.VarChar(50)
  item_type     String @db.VarChar(50)
  item_quantity Int
  price         Int

  @@index([id], map: "id")
  @@index([marker_id], map: "marker_id")
}

model jobs_wardrobes {
  id         Int     @id @default(autoincrement())
  identifier String  @db.VarChar(100)
  label      String  @db.VarChar(50)
  outfit     String? @db.LongText

  @@index([identifier], map: "identifier")
}

model k9 {
  id         Int     @id @default(autoincrement())
  identifier String? @db.VarChar(200)
  dog_data   String? @db.Text

  @@index([identifier], map: "identifier")
}

model laboratories {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(50)
  coords          String  @db.LongText
  allowed_recipes String  @db.LongText
  allowed_jobs    String  @db.LongText
  icon_type       Int
  scale           String  @db.LongText
  bounce          Int     @default(0)
  follow_camera   Int     @default(0)
  rotate          Int     @default(0)
  color           String  @default("0") @db.VarChar(50)
  opacity         Int     @default(0)
  blip_name       String? @db.VarChar(50)
  blip_sprite     Int?
  blip_color      Int?
  blip_scale      Float?  @db.Float

  @@index([id], map: "id")
}

model lapraces {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(50)
  checkpoints String? @db.Text
  records     String? @db.Text
  creator     String? @db.VarChar(50)
  distance    Int?
  raceid      String? @db.VarChar(50)

  @@index([raceid], map: "raceid")
}

model management_funds {
  id       Int                   @id @default(autoincrement())
  job_name String                @unique(map: "job_name") @db.VarChar(50)
  amount   Int
  type     management_funds_type @default(boss)

  @@index([type], map: "type")
}

model management_outfits {
  id         Int     @id @default(autoincrement())
  job_name   String  @db.VarChar(50)
  type       String  @db.VarChar(50)
  minrank    Int     @default(0)
  name       String  @default("Cool Outfit") @db.VarChar(50)
  gender     String  @default("male") @db.VarChar(50)
  model      String? @db.VarChar(50)
  props      String? @db.VarChar(1000)
  components String? @db.VarChar(1500)
}

model mdt_bolos {
  id               Int     @id @default(autoincrement())
  author           String? @db.VarChar(50)
  title            String? @db.VarChar(50)
  plate            String? @db.VarChar(50)
  owner            String? @db.VarChar(50)
  individual       String? @db.VarChar(50)
  detail           String? @db.Text
  tags             String? @db.Text
  gallery          String? @db.Text
  officersinvolved String? @db.Text
  time             String? @db.VarChar(20)
  jobtype          String  @default("police") @db.VarChar(25)
}

model mdt_bulletin {
  id      Int     @id @default(autoincrement())
  title   String  @db.Text
  desc    String  @db.Text
  author  String  @db.VarChar(50)
  time    String  @db.VarChar(20)
  jobtype String? @default("police") @db.VarChar(25)
}

model mdt_clocking {
  id             Int     @default(autoincrement())
  user_id        String  @id @default("") @db.VarChar(50)
  firstname      String  @default("") @db.VarChar(255)
  lastname       String  @default("") @db.VarChar(255)
  clock_in_time  String  @default("") @db.VarChar(255)
  clock_out_time String? @db.VarChar(50)
  total_time     Int     @default(0)

  @@index([id], map: "id")
}

model mdt_convictions {
  id             Int     @id @default(autoincrement())
  cid            String? @db.VarChar(50)
  linkedincident Int     @default(0)
  warrant        String? @db.VarChar(50)
  guilty         String? @db.VarChar(50)
  processed      String? @db.VarChar(50)
  associated     String? @default("0") @db.VarChar(50)
  charges        String? @db.Text
  fine           Int?    @default(0)
  sentence       Int?    @default(0)
  recfine        Int?    @default(0)
  recsentence    Int?    @default(0)
  time           String? @db.VarChar(20)
}

model mdt_data {
  id          Int     @default(autoincrement())
  cid         String  @id @db.VarChar(20)
  information String? @db.MediumText
  tags        String  @db.Text
  gallery     String  @db.Text
  jobtype     String? @default("police") @db.VarChar(25)
  pfp         String? @db.Text
  fingerprint String? @db.VarChar(50)
  dna         String? @db.VarChar(50)
  bloodtype   String? @db.VarChar(50)

  @@index([id], map: "id")
}

model mdt_impound {
  id           Int    @id @default(autoincrement())
  vehicleid    Int
  linkedreport Int
  fee          Int?
  time         String @db.VarChar(255)
}

model mdt_incidents {
  id               Int     @id @default(autoincrement())
  author           String  @default("") @db.VarChar(50)
  title            String  @default("0") @db.VarChar(50)
  details          String  @db.Text
  tags             String  @db.Text
  officersinvolved String  @db.Text
  civsinvolved     String  @db.Text
  evidence         String  @db.Text
  time             String? @db.VarChar(20)
  jobtype          String  @default("police") @db.VarChar(25)
}

model mdt_logs {
  id      Int     @id @default(autoincrement())
  text    String  @db.Text
  time    String? @db.VarChar(20)
  jobtype String? @default("police") @db.VarChar(25)
}

model mdt_reports {
  id               Int     @id @default(autoincrement())
  author           String? @db.VarChar(50)
  title            String? @db.VarChar(255)
  type             String? @db.VarChar(50)
  details          String? @db.Text
  tags             String? @db.Text
  officersinvolved String? @db.Text
  civsinvolved     String? @db.Text
  gallery          String? @db.Text
  time             String? @db.VarChar(20)
  jobtype          String? @default("police") @db.VarChar(25)
}

model mdt_vehicleinfo {
  id          Int     @id @default(autoincrement())
  plate       String? @db.VarChar(50)
  information String  @default("") @db.Text
  stolen      Boolean @default(false)
  code5       Boolean @default(false)
  image       String  @default("") @db.Text
  points      Int?    @default(0)
}

model mdt_weaponinfo {
  id          Int     @id @default(autoincrement())
  serial      String? @unique(map: "serial") @db.VarChar(50)
  owner       String? @db.VarChar(50)
  information String  @default("") @db.Text
  weapClass   String? @db.VarChar(50)
  weapModel   String? @db.VarChar(50)
  image       String? @db.VarChar(255)
}

model money_washing {
  player_identifier   String @id @db.VarChar(255)
  level               Int    @default(1)
  experience          Int    @default(0)
  contracts_completed Int    @default(0)
  total_money_cleaned BigInt @default(0)
  pending             Int    @default(0)
  time_remaining      Int    @default(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model mugshot_evidence {
  id          Int     @default(autoincrement())
  suspect     String  @db.VarChar(255)
  dob         String  @db.VarChar(255)
  description String  @db.VarChar(255)
  image       String  @db.VarChar(255)
  officer     String  @db.VarChar(255)
  time        String  @db.VarChar(255)
  jobs        String? @db.VarChar(255)

  @@index([id], map: "id")
  @@ignore
}

model multijobs {
  citizenid String  @id @db.VarChar(100)
  jobdata   String? @db.Text
}

model objects {
  id   Int    @id @default(autoincrement())
  list String @db.LongText
}

model occasion_vehicles {
  id          Int     @id @default(autoincrement())
  seller      String? @db.VarChar(50)
  price       Int?
  description String? @db.LongText
  plate       String? @db.VarChar(50)
  model       String? @db.VarChar(50)
  mods        String? @db.Text
  occasionid  String? @db.VarChar(50)

  @@index([occasionid], map: "occasionId")
}

model owned_gyms {
  id              Int     @id @default(autoincrement())
  identifier      String  @db.VarChar(500)
  gymid           Int
  gymprice        Int
  gymbalance      Int
  gymvisitorsdata String  @db.LongText
  gymclosed       Boolean @default(false)

  @@index([identifier], map: "identifier")
}

model owned_themepark {
  id         Int    @id @default(autoincrement())
  identifier String @db.VarChar(500)
  balance    Int

  @@index([identifier(length: 191)], map: "identifier")
}

model ox_doorlock {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @db.VarChar(50)
  data String @db.LongText
}

model player_contacts {
  id        Int     @id @default(autoincrement())
  citizenid String? @db.VarChar(50)
  name      String? @db.VarChar(50)
  number    String? @db.VarChar(50)
  iban      String  @default("0") @db.VarChar(50)

  @@index([citizenid], map: "citizenid")
}

model player_houses {
  id            Int     @id @default(autoincrement())
  house         String  @db.VarChar(50)
  identifier    String? @db.VarChar(50)
  citizenid     String? @db.VarChar(50)
  insideId      String? @db.VarChar(50)
  keyholders    String? @db.Text
  decorations   String? @db.Text
  stash         String? @db.Text
  outfit        String? @db.Text
  logout        String? @db.Text
  decorateStash String? @db.VarChar(50)
  houseID       String? @db.VarChar(50)
  timer         Int?    @default(0)
  credit        String? @db.VarChar(50)
  creditPrice   String? @db.VarChar(50)

  @@index([citizenid], map: "citizenid")
  @@index([house], map: "house")
  @@index([identifier], map: "identifier")
}

model player_mails {
  id        Int       @id @default(autoincrement())
  citizenid String?   @db.VarChar(50)
  sender    String?   @db.VarChar(50)
  subject   String?   @db.VarChar(50)
  message   String?   @db.Text
  read      Int?      @default(0) @db.TinyInt
  mailid    Int?
  date      DateTime? @default(now()) @db.Timestamp(0)
  button    String?   @db.Text

  @@index([citizenid], map: "citizenid")
}

model player_outfit_codes {
  id       Int    @id @default(autoincrement())
  outfitid Int
  code     String @default("") @db.VarChar(50)

  @@index([outfitid], map: "FK_player_outfit_codes_player_outfits")
}

model player_outfits {
  id         Int     @id @default(autoincrement())
  citizenid  String? @db.VarChar(50)
  outfitname String  @default("0") @db.VarChar(50)
  model      String? @db.VarChar(50)
  props      String? @db.VarChar(1000)
  components String? @db.VarChar(1500)

  @@unique([citizenid, outfitname, model], map: "citizenid_outfitname_model")
  @@index([citizenid], map: "citizenid")
}

model player_priv_garages {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  owners   String? @db.LongText
  name     String? @db.VarChar(255)
  type     String? @db.VarChar(50)
  x        Float?  @db.Float
  y        Float?  @db.Float
  z        Float?  @db.Float
  h        Float?  @db.Float
  distance Int?    @default(10)
}

model player_sickness {
  citizenid String @id @db.VarChar(255)
  sickness  String @db.Text
}

model player_vehicles {
  id                  Int      @id @default(autoincrement())
  license             String?  @db.VarChar(50)
  citizenid           String?  @db.VarChar(50)
  vehicle             String?  @db.VarChar(50)
  hash                String?  @db.VarChar(50)
  mods                String?  @db.LongText
  plate               String   @db.VarChar(50)
  fakeplate           String?  @db.VarChar(50)
  garage              String?  @db.VarChar(50)
  fuel                Int?     @default(100)
  engine              Float?   @default(1000) @db.Float
  body                Float?   @default(1000) @db.Float
  state               Int?     @default(1)
  depotprice          Int      @default(0)
  drivingdistance     Int?
  status              String?  @db.Text
  balance             Int      @default(0)
  paymentamount       Int      @default(0)
  paymentsleft        Int      @default(0)
  financetime         Int      @default(0)
  damage              String?  @default("") @db.LongText
  in_garage           Boolean? @default(true)
  garage_id           String?  @default("A") @db.VarChar(255)
  job_vehicle         Boolean? @default(false)
  job_vehicle_rank    Int?     @default(0)
  gang_vehicle        Boolean? @default(false)
  gang_vehicle_rank   Int?     @default(0)
  impound             Int?     @default(0)
  impound_retrievable Int?     @default(0)
  impound_data        String?  @default("") @db.LongText
  nickname            String?  @default("") @db.VarChar(255)
  garage_type         String?  @default("car") @db.VarChar(50)
  alarm               Int      @default(0)
  job_personalowned   String?  @default("") @db.VarChar(50)
  property            Int?     @default(0)
  adv_stats           String?  @default("{\"plate\":\"nil\",\"mileage\":0.0,\"maxhealth\":1000.0}") @db.LongText

  @@index([citizenid], map: "citizenid")
  @@index([license], map: "license")
  @@index([plate], map: "plate")
}

model player_warns {
  id               Int     @id @default(autoincrement())
  senderIdentifier String? @db.VarChar(50)
  targetIdentifier String? @db.VarChar(50)
  reason           String? @db.Text
  warnId           String? @db.VarChar(50)
}

model players {
  id           Int      @default(autoincrement())
  citizenid    String   @id @db.VarChar(50)
  cid          Int?
  license      String   @db.VarChar(255)
  name         String   @db.VarChar(255)
  money        String   @db.Text
  charinfo     String?  @db.Text
  job          String   @db.Text
  gang         String?  @db.Text
  position     String   @db.Text
  metadata     String   @db.Text
  inventory    String?  @db.LongText
  last_updated DateTime @default(now()) @db.Timestamp(0)
  inside       String?  @db.VarChar(100)
  iban         String?  @db.Char(50)
  garage_limit Int?     @default(7)
  ganginfo     String?  @db.LongText

  @@index([id], map: "id")
  @@index([last_updated], map: "last_updated")
  @@index([license], map: "license")
}

model playerskins {
  id        Int    @id @default(autoincrement())
  citizenid String @db.VarChar(255)
  model     String @db.VarChar(255)
  skin      String @db.Text
  active    Int    @default(1) @db.TinyInt

  @@index([active], map: "active")
  @@index([citizenid], map: "citizenid")
}

model protections {
  id      Int     @id @default(autoincrement())
  shop_id String? @db.VarChar(64)
  amount  Int?
}

model qp_jobs_market {
  id        String @db.VarChar(30)
  type      String @db.VarChar(15)
  quantity  Int    @default(0)
  buyPrice  Int
  sellPrice Int

  @@id([id, type])
}

model rcore_prison {
  prisoner_id Int       @id @default(autoincrement())
  owner       String    @db.VarChar(255)
  jail_time   DateTime? @db.DateTime(0)
  data        String?   @db.LongText
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @db.Timestamp(0)

  @@index([owner], map: "owner")
}

model rcore_prison_accounts {
  account_id            Int                     @id @default(autoincrement())
  owner                 String?                 @db.VarChar(46)
  balance               BigInt?                 @default(0)
  giftstate             Int?                    @default(0) @db.TinyInt
  createdAt             DateTime?               @default(now()) @db.Timestamp(0)
  updatedAt             DateTime                @default(now()) @db.Timestamp(0)
  rcore_prison_contacts rcore_prison_contacts[] @ignore

  @@index([owner], map: "owner")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model rcore_prison_contacts {
  account_id            Int?
  owner                 String?                @db.VarChar(46)
  name                  String?                @db.LongText
  targetowner           String?                @db.VarChar(50)
  rcore_prison_accounts rcore_prison_accounts? @relation(fields: [account_id], references: [account_id], onDelete: Restrict, onUpdate: Restrict, map: "FK_rcore_prison_contacts_rcore_prison_accounts")

  @@index([account_id], map: "FK_rcore_prison_contacts_rcore_prison_accounts")
  @@ignore
}

model rcore_prison_stash {
  owner String @id @db.VarChar(255)
  stash String @db.LongText
}

model rcore_prison_transactions {
  transaction_id   Int       @id @default(autoincrement())
  account_id       Int?
  transaction_name String?   @db.VarChar(255)
  charid           Int?
  isRead           Int       @default(0) @db.TinyInt
  message          String?   @db.VarChar(255)
  createdAt        DateTime? @default(now()) @db.Timestamp(0)
  updatedAt        DateTime? @default(now()) @db.Timestamp(0)

  @@index([account_id], map: "account_id")
}

model rcore_reports {
  id              Int       @id @default(autoincrement())
  author          String    @db.Text
  title           String    @db.Text
  state           String    @db.VarChar(20)
  tag             String?   @db.Text
  created_at      DateTime  @db.DateTime(0)
  in_resolve_at   DateTime? @db.DateTime(0)
  in_resolve_by   String?   @db.Text
  resolved_at     DateTime? @db.DateTime(0)
  resolved_by     String?   @db.Text
  players_in_area String    @db.Text
  chat_room       String    @db.Text
  logger          String    @db.Text
}

model rcore_reports_admin_chat {
  id              Int      @id @default(autoincrement())
  author          String   @db.Text
  parentMessageId Int?
  message         String   @db.Text
  created_at      DateTime @db.DateTime(0)
}

model rcore_reports_tags {
  id  Int    @id @default(autoincrement())
  tag String @db.Text
}

model rcore_tattoos {
  identifier String  @id @unique(map: "rcore_tattoos_identifier_uindex") @db.VarChar(100)
  tattoos    String? @db.LongText
}

model rcore_tattoos_business {
  name   String  @id @db.VarChar(60)
  margin Int?    @default(20)
  money  Int?
  owner  String? @db.VarChar(60)
}

model rivalries {
  id                Int       @id @default(autoincrement())
  zone              String?   @db.VarChar(32)
  attacking_gang_id Int?
  defending_gang_id Int?
  funds             Int?
  attacker_sold     Int?      @default(0)
  defender_sold     Int?      @default(0)
  created_at        DateTime? @db.Timestamp(0)
  ends_at           DateTime? @db.DateTime(0)
}

model robberies_creator_cargo_robberies {
  id                          Int                           @id @default(autoincrement())
  label                       String                        @db.VarChar(50)
  blip_data                   String                        @db.LongText
  data                        String                        @db.LongText
  robberies_creator_plannings robberies_creator_plannings[]

  @@index([id], map: "id")
}

model robberies_creator_heists {
  id                   Int    @id @default(autoincrement())
  label                String @db.VarChar(100)
  minimum_police       Int    @default(0)
  timeout_minutes      Int    @default(120)
  minutes_before_reset Int    @default(60)
  time_limit_minutes   Int    @default(0)
  stages               String @db.LongText
}

model robberies_creator_plannings {
  id                                Int                                @id @default(autoincrement())
  label                             String                             @db.VarChar(50)
  data                              String                             @db.LongText
  cargo_robbery_id                  Int?
  minimum_police                    Int                                @default(0)
  robberies_creator_cargo_robberies robberies_creator_cargo_robberies? @relation(fields: [cargo_robbery_id], references: [id], map: "cargo_robbery_id")

  @@index([cargo_robbery_id], map: "cargo_robbery_id")
  @@index([id], map: "id")
}

model sprays {
  id         Int      @id @default(autoincrement())
  identifier String?  @db.VarChar(64)
  x          Float    @db.Float
  y          Float    @db.Float
  z          Float    @db.Float
  origX      Float    @db.Float
  origY      Float    @db.Float
  origZ      Float    @db.Float
  rx         Float    @db.Float
  ry         Float    @db.Float
  rz         Float    @db.Float
  scale      Float    @db.Float
  text       String?  @db.VarChar(32)
  image      String?  @db.VarChar(64)
  imageDict  String?  @db.VarChar(64)
  font       String?  @db.VarChar(32)
  color      String?  @db.VarChar(32)
  interior   Int
  created_at DateTime @default(now()) @db.Timestamp(0)
}

model stashitems {
  id    Int     @default(autoincrement())
  stash String  @id @default("[]") @db.VarChar(255)
  items String? @db.LongText

  @@index([id], map: "id")
}

model trunkitems {
  id    Int     @default(autoincrement())
  plate String  @id @default("[]") @db.VarChar(255)
  items String? @db.LongText

  @@index([id], map: "id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tuning_discount_codes {
  code            String? @db.VarChar(25)
  mechanic_point  String? @db.VarChar(25)
  percentage      Int
  count_to_use    Int
  currently_using Int?    @default(0)

  @@ignore
}

model vehiclekeys_jobs {
  id                  String @id @db.VarChar(50)
  type                String @db.VarChar(50)
  allowed_jobs        String @db.LongText
  kick_if_not_allowed Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model vehiclekeys_permanent_keys {
  plate      String  @db.VarChar(50)
  identifier String  @db.VarChar(100)
  model      String? @db.VarChar(100)

  @@id([plate, identifier])
  @@index([plate], map: "plate")
}

enum management_funds_type {
  boss
  gang
}

enum bank_accounts_account_type {
  Current
  Savings
  business
  Gang
}
